# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# main branch에 push 또는 pull_request가 발생하면 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용
permissions:
  contents: read

jobs:
  build:
    # ubuntu 최신 버전에서 script를 실행
    runs-on: ubuntu-latest

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - uses: actions/checkout@v3
      # open jdk 17 버전 환경을 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
      - name: make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application.yml
          
      # gradle을 통해 소스를 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repository로 push
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker build & push to docker repository
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/jewelry:${{ secrets.DOCKER_IMAGE_TAG }} .
          docker push ${{ secrets.DOCKER_REPO }}/jewelry:${{ secrets.DOCKER_IMAGE_TAG }}
      
      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repoistory로부터 방금 위에서 push한 내용을 pull 받아 실행
      # 실행 시, docker-compose 사용
      - name: Deploy
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          username: ec2-user
          host: ${{ secrets.HOST }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            export IMAGE_TAG=${{ secrets.DOCKER_IMAGE_TAG }}
            export DOCKER_USERNAME=${{ secrets.DOCKER_REPO }}
            chmod 777 /home/ubuntu/docker/deploy.sh
            /home/ubuntu/docker/deploy.sh $IMAGE_TAG $DOCKER_USERNAME

