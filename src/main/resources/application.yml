#server:
#  port: 8080
#  servlet:
#    context-path: /
#    session:
#      timeout: 1800

logging:
  level:
    com:
      amazonaws:
        util:
          EC2MetadataUtils: error
    org:
      hibernate:
        SQL: debug
        type:
          descriptor:
            sql: trace
      springframework:
        orm:
          jpa: DEBUG
        transaction: DEBUG

spring:
  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true
  mustache:
    cache: false
  thymeleaf:
    prefix: classpath:templates/
    suffix: .html
    cache: false
  datasource:
    hikari:
      connection-test-query: SELECT NOW() FROM dual
      connection-timeout: 30000
      driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
      idle-timeout: 600000
      jdbc-url: jdbc:log4jdbc:mysql://{db-ip}:{db-port}/{db}?serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&allowMultiQueries=true
      max-lifetime: 1800000
      maximum-pool-size: 10
      minimum-idle: 1
      username: { db-username }
      password: { db-password }
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 30MB
  jpa:
    generate-ddl: false
    hibernate:
      ddl-auto: none
      naming:
        #implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        #physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        physical-strategy: com.jewelry.config.strategy.CustomCamelCaseToUnderscoresNamingStrategy
    properties:
      hibernate:
        dialect: com.jewelry.config.dialect.CustomMySQLDialect
        format_sql: true
        highlight_sql: true
        use_sql_comments: false
  redis:
    port: { redis-port }
    host: { redis-host }

cloud:
  aws:
    region:
      static: { s3-bucket-static }
    s3:
      bucket:
        name: { s3-bucket-name }
        region: { s3-bucket-region }
      iam:
        accesskey: { s3-bucket-accesskey }
        secretkey: { s3-bucket-secretkey }
      path: { s3-bucket-path }
    stack:
      auto: false

jwt:
  header: Authorization
  secret: { jwt-secret }
  access-token-validity-in-seconds: 1800 #30분
  refresh-token-validity-in-seconds: 1296000  #15일
  value:
    authorization: Authorization
    grant: { jwt-grant }


